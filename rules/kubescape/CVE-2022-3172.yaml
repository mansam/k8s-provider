- ruleID: CVE_2022_3172
  effort: 1
  category: optional
  message: List aggregated API server APIServices if kube-api-server version is vulnerable to CVE-2022-3172
  when:
    k8s-resource.rego_module:
        module: |-
            package policy

            import future.keywords.in

            deny[msg] {
            	# find aggregated API APIServices
            	obj = input[_]
            	obj.apiVersion == "apiregistration.k8s.io/v1"
            	obj.kind == "APIService"
            	api_service := obj.spec.service

            	# check API server version vulnerability
            	api_infos = [api_info |
            		api_info := input[i]
            		api_info.apiVersion == "apiserverinfo.kubescape.cloud/v1beta0"
            		api_info.kind == "APIServerInfo"
            		api_info.metadata.name == "version"
            	]

            	version = get_api_server_version(api_infos)
            	is_api_server_version_affected(version)

            	# Find the service that exposes the extended API
            	services = [obj |
            		obj := input[j]
            		obj.apiVersion == "v1"
            		obj.kind == "Service"
            		obj.metadata.name == api_service.name
            	]

            	count(services) == 1
            	service = services[0]

            	msg := {
            		"alertMessage": "the following pair of APIService and Service may redirect client traffic to any URL",
            		"alertScore": 2,
            		"failedPaths": [],
            		"fixPaths": [],
            		"packagename": "policy",
            		"alertObject": {"k8sApiObjects": [obj, service]},
            	}
            }

            # current kubescpae version (v2.0.171) still not support this resource
            get_api_server_version(api_infos) = version {
            	count(api_infos) == 1
            	v = replace(split(api_infos[0].data.gitVersion, "-")[0], "v", "")
            	semver.is_valid(v)
            	version = v
            }

            get_api_server_version(api_infos) = version {
            	count(api_infos) == 1
            	v = replace(split(api_infos[0].data.gitVersion, "-")[0], "v", "")
            	not semver.is_valid(v)
            	version := ""
            }

            get_api_server_version(api_infos) = version {
            	count(api_infos) != 1
            	version = ""
            }

            is_api_server_version_affected(version) {
            	version == ""
            }

            is_api_server_version_affected(version) {
            	semver.compare(version, "1.25.0") == 0
            }

            is_api_server_version_affected(version) {
            	semver.compare(version, "1.24.0") >= 0
            	semver.compare(version, "1.24.4") <= 0
            }

            is_api_server_version_affected(version) {
            	semver.compare(version, "1.23.0") >= 0
            	semver.compare(version, "1.23.10") <= 0
            }

            is_api_server_version_affected(version) {
            	semver.compare(version, "1.22.0") >= 0
            	semver.compare(version, "1.22.13") <= 0
            }

            is_api_server_version_affected(version) {
            	semver.compare(version, "1.21.14") <= 0
            }

            incidents[msg] {
              violation := deny[_]
              apiObjects := object.get(violation.alertObject, "k8sApiObjects", false)
              item := apiObjects[_]
              msg := {
            	  "apiVersion": item.apiVersion,
            		"namespace": item.metadata.namespace,
            		"kind": item.kind,
            		"name": item.metadata.name,
              }
            }

            incidents[msg] {
              violation := deny[_]
              item := object.get(violation.alertObject, "externalObjects", false)
              msg := {
            	  "apiVersion": item.apiVersion,
            		"namespace": item.metadata.namespace,
            		"kind": item.kind,
            		"name": item.metadata.name,
              }
            }
