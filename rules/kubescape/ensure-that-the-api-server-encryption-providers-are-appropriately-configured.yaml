- ruleID: ensure_that_the_api_server_encryption_providers_are_appropriately_configured
  effort: 1
  category: optional
  message: Where `etcd` encryption is used, appropriate providers should be configured.
  when:
    k8s-resource.rego_module:
        module: "package policy\r\n\r\nimport future.keywords.in\r\n\r\n# Encryption config is set but not using one of the recommended providers\r\ndeny[msg] {\r\n\tobj = input[_]\r\n\tis_control_plane_info(obj)\r\n\tconfig_file := obj.data.APIServerInfo.encryptionProviderConfigFile\r\n\tconfig_file_content = decode_config_file(base64.decode(config_file.content))\r\n\r\n\t# For each resource check if it does not have allowed provider\r\n\tfix_paths := [{\r\n\t\t\"path\": sprintf(\"resources[%d].providers[%d]\", [i, count(resource.providers)]),\r\n\t\t\"value\": \"{\\\"aescbc\\\" | \\\"secretbox\\\" | \\\"kms\\\" : <provider config>}\", # must be string\r\n\t} |\r\n\t\tresource := config_file_content.resources[i]\r\n\t\tcount({true |\r\n\t\t\tsome provider in resource.providers\r\n\t\t\thas_one_of_keys(provider, [\"aescbc\", \"secretbox\", \"kms\"])\r\n\t\t}) == 0\r\n\t]\r\n\r\n\tcount(fix_paths) > 0\r\n\r\n\t# Add name to the failed object so that\r\n\t# it fit the format of the alert object\r\n\tfailed_obj := json.patch(config_file_content, [{\r\n\t\t\"op\": \"add\",\r\n\t\t\"path\": \"name\",\r\n\t\t\"value\": \"encryption-provider-config\",\r\n\t}])\r\n\r\n\tmsg := {\r\n\t\t\"alertMessage\": \"Encryption provider config is not using one of the allowed providers (aescbc, secretbox, kms)\",\r\n\t\t\"alertScore\": 2,\r\n\t\t\"failedPaths\": [],\r\n\t\t\"fixPaths\": fix_paths,\r\n\t\t\"packagename\": \"policy\",\r\n\t\t\"alertObject\": {\"externalObjects\": failed_obj},\r\n\t}\r\n}\r\n\r\nis_control_plane_info(obj) {\r\n\tobj.apiVersion == \"hostdata.kubescape.cloud/v1beta0\"\r\n\tobj.kind == \"ControlPlaneInfo\"\r\n}\r\n\r\ndecode_config_file(content) := parsed {\r\n\tparsed := yaml.unmarshal(content)\r\n} else := json.unmarshal(content)\r\n\r\nhas_key(x, k) {\r\n\t_ = x[k]\r\n}\r\n\r\nhas_one_of_keys(x, keys) {\r\n\thas_key(x, keys[_])\r\n}\r\n\nincidents[msg] {\n  violation := deny[_]\n  apiObjects := object.get(violation.alertObject, \"k8sApiObjects\", false)\n  item := apiObjects[_]\n  msg := {\n\t  \"apiVersion\": item.apiVersion,\n\t\t\"namespace\": item.metadata.namespace,\n\t\t\"kind\": item.kind,\n\t\t\"name\": item.metadata.name,\n  }\n}\n\nincidents[msg] {\n  violation := deny[_]\n  item := object.get(violation.alertObject, \"externalObjects\", false)\n  msg := {\n\t  \"apiVersion\": item.apiVersion,\n\t\t\"namespace\": item.metadata.namespace,\n\t\t\"kind\": item.kind,\n\t\t\"name\": item.metadata.name,\n  }\n}"
