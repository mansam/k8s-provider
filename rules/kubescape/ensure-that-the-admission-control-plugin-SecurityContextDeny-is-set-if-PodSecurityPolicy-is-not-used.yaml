- ruleID: ensure_that_the_admission_control_plugin_SecurityContextDeny_is_set_if_PodSecurityPolicy_is_not_used
  effort: 1
  category: optional
  message: The SecurityContextDeny admission controller can be used to deny pods which make use of some SecurityContext fields which could allow for privilege escalation in the cluster. This should be used where PodSecurityPolicy is not in place within the cluster.
  when:
    k8s-resource.rego_module:
        module: "package policy\r\n\r\nimport future.keywords.in\r\n\r\ndeny[msg] {\r\n\tobj = input[_]\r\n\tis_api_server(obj)\r\n\tresult = invalid_flag(obj.spec.containers[0].command)\r\n\tmsg := {\r\n\t\t\"alertMessage\":\"The SecurityContextDeny addmission controller is not enabled. This could allow for privilege escalation in the cluster\", \r\n\t\t\"alertScore\": 2,\r\n\t\t\"reviewPaths\": result.failed_paths,\r\n\t\t\"failedPaths\": result.failed_paths,\r\n\t\t\"fixPaths\": result.fix_paths,\r\n\t\t\"packagename\": \"policy\",\r\n\t\t\"alertObject\": {\"k8sApiObjects\": [obj]},\r\n\t}\r\n}\r\n\r\nis_api_server(obj) {\r\n\tobj.apiVersion == \"v1\"\r\n\tobj.kind == \"Pod\"\r\n\tobj.metadata.namespace == \"kube-system\"\r\n\tcount(obj.spec.containers) == 1\r\n\tcount(obj.spec.containers[0].command) > 0\r\n\tendswith(obj.spec.containers[0].command[0], \"kube-apiserver\")\r\n}\r\n\r\nget_flag_values(cmd) = {\"origin\": origin, \"values\": values} {\r\n\tre := \" ?--enable-admission-plugins=(.+?)(?: |$)\"\r\n\tmatchs := regex.find_all_string_submatch_n(re, cmd, -1)\r\n\tcount(matchs) == 1\r\n\tvalues := [val | val := split(matchs[0][1], \",\")[j]; val != \"\"]\r\n\torigin := matchs[0][0]\r\n}\r\n\r\n# Assume flag set only once\r\ninvalid_flag(cmd) = result {\r\n\tflag := get_flag_values(cmd[i])\r\n\r\n\t# value check\r\n\tnot \"SecurityContextDeny\" in flag.values\r\n\tnot \"PodSecurityPolicy\" in flag.values\r\n\r\n\t# get fixed and failed paths\r\n\tfixed_values := array.concat(flag.values, [\"SecurityContextDeny\"])\r\n\tfixed_flag = sprintf(\"%s=%s\", [\"--enable-admission-plugins\", concat(\",\", fixed_values)])\r\n\tfixed_cmd = replace(cmd[i], flag.origin, fixed_flag)\r\n\tpath := sprintf(\"spec.containers[0].command[%d]\", [i])\r\n\r\n\tresult := {\r\n\t\t\"failed_paths\": [path],\r\n\t\t\"fix_paths\": [{\r\n\t\t\t\"path\": path,\r\n\t\t\t\"value\": fixed_cmd,\r\n\t\t}],\r\n\t}\r\n}\r\n\r\ninvalid_flag(cmd) = result {\r\n\tfull_cmd := concat(\" \", cmd)\r\n\tnot contains(full_cmd, \"--enable-admission-plugins\")\r\n\r\n\tpath = sprintf(\"spec.containers[0].command[%d]\", [count(cmd)])\r\n\tresult = {\r\n\t\t\"failed_paths\": [],\r\n\t\t\"fix_paths\": [{\r\n\t\t\t\"path\": path,\r\n\t\t\t\"value\": \"--enable-admission-plugins=SecurityContextDeny\",\r\n\t\t}],\r\n\t}\r\n}\r\n\nincidents[msg] {\n  violation := deny[_]\n  apiObjects := object.get(violation.alertObject, \"k8sApiObjects\", false)\n  item := apiObjects[_]\n  msg := {\n\t  \"apiVersion\": item.apiVersion,\n\t\t\"namespace\": item.metadata.namespace,\n\t\t\"kind\": item.kind,\n\t\t\"name\": item.metadata.name,\n  }\n}\n\nincidents[msg] {\n  violation := deny[_]\n  item := object.get(violation.alertObject, \"externalObjects\", false)\n  msg := {\n\t  \"apiVersion\": item.apiVersion,\n\t\t\"namespace\": item.metadata.namespace,\n\t\t\"kind\": item.kind,\n\t\t\"name\": item.metadata.name,\n  }\n}"
