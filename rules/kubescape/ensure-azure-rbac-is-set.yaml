- ruleID: ensure_azure_rbac_is_set
  effort: 1
  category: optional
  message: Azure role-based access control (RBAC) is an authorization system built on Azure Resource Manager that provides fine-grained access management of Azure resources.
  when:
    k8s-resource.rego_module:
        module: |-
            package policy

            # fails in case Azure RBAC is not set on AKS instance.
            deny[msga] {
               	cluster_describe := input[_]
            	cluster_describe.apiVersion == "management.azure.com/v1"
            	cluster_describe.kind == "ClusterDescribe"
            	cluster_describe.metadata.provider == "aks"
            	properties := cluster_describe.data.properties

            	not isAzureRBACEnabled(properties)

            	msga := {
            		"alertMessage": "Azure RBAC is not set. Enable it using the command: az aks update -g <resource_group> -n <cluster_name> --enable-azure-rbac",
            		"alertScore": 7,
            		"packagename": "policy",
            		"failedPaths": [],
            		"fixCommand": "az aks update -g <resource_group> -n <cluster_name> --enable-azure-rbac",
            		"fixPaths": [],
            		"alertObject": {
            			"externalObjects": cluster_describe
            		},
            	}
            }

            # isAzureRBACEnabled check if Azure RBAC is enabled into ClusterDescribe object
            # retrieved from azure cli.
            isAzureRBACEnabled(properties) {
                properties.aadProfile.enableAzureRBAC == true
            }

            incidents[msg] {
              violation := deny[_]
              apiObjects := object.get(violation.alertObject, "k8sApiObjects", false)
              item := apiObjects[_]
              msg := {
            	  "apiVersion": item.apiVersion,
            		"namespace": item.metadata.namespace,
            		"kind": item.kind,
            		"name": item.metadata.name,
              }
            }

            incidents[msg] {
              violation := deny[_]
              item := object.get(violation.alertObject, "externalObjects", false)
              msg := {
            	  "apiVersion": item.apiVersion,
            		"namespace": item.metadata.namespace,
            		"kind": item.kind,
            		"name": item.metadata.name,
              }
            }
