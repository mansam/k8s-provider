- ruleID: outdated_k8s_version
  effort: 1
  category: optional
  message: ""
  when:
    k8s-resource.rego_module:
        module: |-
            package policy

            import future.keywords.every

            deny[msga] {
            	node := input[_]
            	node.kind == "Node"
            	current_version := node.status.nodeInfo.kubeletVersion
                has_outdated_version(current_version)
            	path := "status.nodeInfo.kubeletVersion"
            	msga := {
            			"alertMessage": sprintf("Your kubelet version: %s, in node: %s is outdated", [current_version, node.metadata.name]),
            			"reviewPaths": [path],
            			"alertObject": {"k8SApiObjects": [node]},
            	}
            }


            has_outdated_version(version)  {
            	# the `supported_k8s_versions` is validated in the validations script against "https://api.github.com/repos/kubernetes/kubernetes/releases"
                supported_k8s_versions := ["v1.29", "v1.28", "v1.27"]
            	every v in supported_k8s_versions{
            		not startswith(version, v)
            	}
            }

            incidents[msg] {
              violation := deny[_]
              apiObjects := object.get(violation.alertObject, "k8sApiObjects", false)
              item := apiObjects[_]
              msg := {
            	  "apiVersion": item.apiVersion,
            		"namespace": item.metadata.namespace,
            		"kind": item.kind,
            		"name": item.metadata.name,
              }
            }

            incidents[msg] {
              violation := deny[_]
              item := object.get(violation.alertObject, "externalObjects", false)
              msg := {
            	  "apiVersion": item.apiVersion,
            		"namespace": item.metadata.namespace,
            		"kind": item.kind,
            		"name": item.metadata.name,
              }
            }
