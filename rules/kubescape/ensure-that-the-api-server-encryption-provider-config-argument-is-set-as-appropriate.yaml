- ruleID: ensure_that_the_api_server_encryption_provider_config_argument_is_set_as_appropriate
  effort: 1
  category: optional
  message: Encrypt etcd key-value store.
  when:
    k8s-resource.rego_module:
        module: "package policy\r\n\r\nimport future.keywords.in\r\n\r\n# Encryption config is not set at all\r\ndeny[msg] {\r\n\tobj = input[_]\r\n\tis_api_server(obj)\r\n\r\n\tcmd := obj.spec.containers[0].command\r\n\tnot contains(concat(\" \", cmd), \"--encryption-provider-config\")\r\n\r\n\tmsg := {\r\n\t\t\"alertMessage\": \"Encryption provider config file not set\",\r\n\t\t\"alertScore\": 2,\r\n\t\t\"failedPaths\": [],\r\n\t\t\"fixPaths\": [{\r\n\t\t\t\"path\": sprintf(\"spec.containers[0].command[%d]\", [count(cmd)]),\r\n\t\t\t\"value\": \"--encryption-provider-config=<path/to/encryption-config.yaml>\",\r\n\t\t}],\r\n\t\t\"packagename\": \"policy\",\r\n\t\t\"alertObject\": {\"k8sApiObjects\": [obj]},\r\n\t}\r\n}\r\n\r\n# Encryption config is set but not covering secrets\r\ndeny[msg] {\r\n\tobj = input[_]\r\n\tis_control_plane_info(obj)\r\n\tconfig_file := obj.data.APIServerInfo.encryptionProviderConfigFile\r\n\tconfig_file_content = decode_config_file(base64.decode(config_file.content))\r\n\r\n\t# Check if the config conver secrets\r\n\tcount({true | \"secrets\" in config_file_content.resources[_].resources}) == 0\r\n\r\n\t# Add name to the failed object so that\r\n\t# it fit the format of the alert object\r\n\tfailed_obj := json.patch(config_file_content, [{\r\n\t\t\"op\": \"add\",\r\n\t\t\"path\": \"name\",\r\n\t\t\"value\": \"encryption-provider-config\",\r\n\t}])\r\n\r\n\tmsg := {\r\n\t\t\"alertMessage\": \"Encryption provider config is not covering secrets\",\r\n\t\t\"alertScore\": 2,\r\n\t\t\"failedPaths\": [],\r\n\t\t\"fixPaths\": [],\r\n\t\t\"packagename\": \"policy\",\r\n\t\t\"alertObject\": {\"externalObjects\": failed_obj},\r\n\t}\r\n}\r\n\r\nis_api_server(obj) {\r\n\tobj.apiVersion == \"v1\"\r\n\tobj.kind == \"Pod\"\r\n\tobj.metadata.namespace == \"kube-system\"\r\n\tcount(obj.spec.containers) == 1\r\n\tcount(obj.spec.containers[0].command) > 0\r\n\tendswith(obj.spec.containers[0].command[0], \"kube-apiserver\")\r\n}\r\n\r\nis_control_plane_info(obj) {\r\n\tobj.apiVersion == \"hostdata.kubescape.cloud/v1beta0\"\r\n\tobj.kind == \"ControlPlaneInfo\"\r\n}\r\n\r\ndecode_config_file(content) := parsed {\r\n\tparsed := yaml.unmarshal(content)\r\n} else := json.unmarshal(content)\r\n\nincidents[msg] {\n  violation := deny[_]\n  apiObjects := object.get(violation.alertObject, \"k8sApiObjects\", false)\n  item := apiObjects[_]\n  msg := {\n\t  \"apiVersion\": item.apiVersion,\n\t\t\"namespace\": item.metadata.namespace,\n\t\t\"kind\": item.kind,\n\t\t\"name\": item.metadata.name,\n  }\n}\n\nincidents[msg] {\n  violation := deny[_]\n  item := object.get(violation.alertObject, \"externalObjects\", false)\n  msg := {\n\t  \"apiVersion\": item.apiVersion,\n\t\t\"namespace\": item.metadata.namespace,\n\t\t\"kind\": item.kind,\n\t\t\"name\": item.metadata.name,\n  }\n}"
