- ruleID: namespace_without_service_account
  effort: 1
  category: optional
  message: fails if namespace does not have service accounts (not incluiding default)
  when:
    k8s-resource.rego_module:
        module: |-
            package policy


            # Fails if namespace does not have service accounts (not incluiding default)
            deny[msga] {
            	namespace := input[_]
            	namespace.kind == "Namespace"
            	serviceAccounts := [serviceaccount |  serviceaccount= input[_]; is_good_sa(serviceaccount, namespace.metadata.name)]
            	count(serviceAccounts) < 1
            	msga := {
            		"alertMessage": sprintf("Namespace: %v does not have any service accounts besides 'default'", [namespace.metadata.name]),
            		"packagename": "policy",
            		"alertScore": 7,
            		"failedPaths": [],
            		"fixPaths": [],
            		"alertObject": {
            			"k8sApiObjects": [namespace]
            		}
            	}
            }
            	
            	
            is_good_sa(sa, namespace) {
            	sa.kind == "ServiceAccount"
            	sa.metadata.namespace == namespace
            	sa.metadata.name != "default"
            }
            incidents[msg] {
              violation := deny[_]
              apiObjects := object.get(violation.alertObject, "k8sApiObjects", false)
              item := apiObjects[_]
              msg := {
            	  "apiVersion": item.apiVersion,
            		"namespace": item.metadata.namespace,
            		"kind": item.kind,
            		"name": item.metadata.name,
              }
            }

            incidents[msg] {
              violation := deny[_]
              item := object.get(violation.alertObject, "externalObjects", false)
              msg := {
            	  "apiVersion": item.apiVersion,
            		"namespace": item.metadata.namespace,
            		"kind": item.kind,
            		"name": item.metadata.name,
              }
            }
