- ruleID: ensure_that_the_API_Server_only_makes_use_of_Strong_Cryptographic_Ciphers
  effort: 1
  category: optional
  message: Ensure that the API server is configured to only use strong cryptographic ciphers.
  when:
    k8s-resource.rego_module:
        module: "package policy\r\n\r\nimport future.keywords.in\r\n\r\ndeny[msg] {\r\n\tobj = input[_]\r\n\tis_api_server(obj)\r\n\twanted = [\r\n\t\t\"TLS_AES_128_GCM_SHA256\",\r\n\t\t\"TLS_AES_256_GCM_SHA384\",\r\n\t\t\"TLS_CHACHA20_POLY1305_SHA256\",\r\n\t\t\"TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\",\r\n\t\t\"TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\",\r\n\t\t\"TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA\",\r\n\t\t\"TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\",\r\n\t\t\"TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305\",\r\n\t\t\"TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\",\r\n\t\t\"TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA\",\r\n\t\t\"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\",\r\n\t\t\"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\",\r\n\t\t\"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\",\r\n\t\t\"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\",\r\n\t\t\"TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305\",\r\n\t\t\"TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\",\r\n\t\t\"TLS_RSA_WITH_3DES_EDE_CBC_SHA\",\r\n\t\t\"TLS_RSA_WITH_AES_128_CBC_SHA\",\r\n\t\t\"TLS_RSA_WITH_AES_128_GCM_SHA256\",\r\n\t\t\"TLS_RSA_WITH_AES_256_CBC_SHA\",\r\n\t\t\"TLS_RSA_WITH_AES_256_GCM_SHA384\",\r\n\t]\r\n\tresult = invalid_flag(obj.spec.containers[0].command, wanted)\r\n\tmsg := {\r\n\t\t\"alertMessage\": \"The API server is not configured to use strong cryptographic ciphers\",\r\n\t\t\"alertScore\": 2,\r\n\t\t\"reviewPaths\": result.failed_paths,\r\n\t\t\"failedPaths\": result.failed_paths,\r\n\t\t\"fixPaths\": result.fix_paths,\r\n\t\t\"packagename\": \"policy\",\r\n\t\t\"alertObject\": {\"k8sApiObjects\": [obj]},\r\n\t}\r\n}\r\n\r\nis_api_server(obj) {\r\n\tobj.apiVersion == \"v1\"\r\n\tobj.kind == \"Pod\"\r\n\tobj.metadata.namespace == \"kube-system\"\r\n\tcount(obj.spec.containers) == 1\r\n\tcount(obj.spec.containers[0].command) > 0\r\n\tendswith(obj.spec.containers[0].command[0], \"kube-apiserver\")\r\n}\r\n\r\nget_flag_values(cmd) = {\"origin\": origin, \"values\": values} {\r\n\tre := \" ?--tls-cipher-suites=(.+?)(?: |$)\"\r\n\tmatchs := regex.find_all_string_submatch_n(re, cmd, -1)\r\n\tcount(matchs) == 1\r\n\tvalues := [val | val := split(matchs[0][1], \",\")[j]; val != \"\"]\r\n\torigin := matchs[0][0]\r\n}\r\n\r\n\r\n# Assume flag set only once\r\ninvalid_flag(cmd, wanted) = result {\r\n\tflag := get_flag_values(cmd[i])\r\n\r\n\t# value check\r\n\tmissing = [x | x = wanted[_]; not x in flag.values]\r\n\tcount(missing) > 0\r\n\r\n\t# get fixed and failed paths\r\n\tfixed_values := array.concat(flag.values, missing)\r\n\tfixed_flag = sprintf(\"%s=%s\", [\"--tls-cipher-suites\", concat(\",\", fixed_values)])\r\n\tfixed_cmd = replace(cmd[i], flag.origin, fixed_flag)\r\n\tpath := sprintf(\"spec.containers[0].command[%d]\", [i])\r\n\r\n\tresult := {\r\n\t\t\"failed_paths\": [path],\r\n\t\t\"fix_paths\": [{\r\n\t\t\t\"path\": path,\r\n\t\t\t\"value\": fixed_cmd,\r\n\t\t}],\r\n\t}\r\n}\r\n\r\ninvalid_flag(cmd, wanted) = result {\r\n\tfull_cmd := concat(\" \", cmd)\r\n\tnot contains(full_cmd, \"--tls-cipher-suites\")\r\n\r\n\tpath = sprintf(\"spec.containers[0].command[%d]\", [count(cmd)])\r\n\tresult = {\r\n\t\t\"failed_paths\": [],\r\n\t\t\"fix_paths\": [{\r\n\t\t\t\"path\": path,\r\n\t\t\t\"value\": sprintf(\"--tls-cipher-suites=%s\", [concat(\",\", wanted)]),\r\n\t\t}],\r\n\t}\r\n}\r\n\nincidents[msg] {\n  violation := deny[_]\n  apiObjects := object.get(violation.alertObject, \"k8sApiObjects\", false)\n  item := apiObjects[_]\n  msg := {\n\t  \"apiVersion\": item.apiVersion,\n\t\t\"namespace\": item.metadata.namespace,\n\t\t\"kind\": item.kind,\n\t\t\"name\": item.metadata.name,\n  }\n}\n\nincidents[msg] {\n  violation := deny[_]\n  item := object.get(violation.alertObject, \"externalObjects\", false)\n  msg := {\n\t  \"apiVersion\": item.apiVersion,\n\t\t\"namespace\": item.metadata.namespace,\n\t\t\"kind\": item.kind,\n\t\t\"name\": item.metadata.name,\n  }\n}"
