- ruleID: rule_secrets_in_env_var
  effort: 1
  category: optional
  message: fails if Pods have secrets in environment variables
  when:
    k8s-resource.rego_module:
        module: |-
            package policy

            deny[msga] {
            	pod := input[_]
            	pod.kind == "Pod"

            	container := pod.spec.containers[i]
            	env := container.env[j]
            	env.valueFrom.secretKeyRef

            	path := sprintf("spec.containers[%v].env[%v].name", [format_int(i, 10), format_int(j, 10)])

            	msga := {
            		"alertMessage": sprintf("Pod: %v has secrets in environment variables", [pod.metadata.name]),
            		"alertScore": 9,
            		"fixPaths": [],
            		"deletePaths": [path],
            		"failedPaths": [path],
            		"packagename": "policy",
            		"alertObject": {
            			"k8sApiObjects": [pod]
            		}
            	}
            }

            deny[msga] {
            	wl := input[_]
            	spec_template_spec_patterns := {"Deployment","ReplicaSet","DaemonSet","StatefulSet","Job"}
            	spec_template_spec_patterns[wl.kind]
            	container := wl.spec.template.spec.containers[i]
            	env := container.env[j]
            	env.valueFrom.secretKeyRef

            	path := sprintf("spec.template.spec.containers[%v].env[%v].name", [format_int(i, 10), format_int(j, 10)])

            	msga := {
            		"alertMessage": sprintf("%v: %v has secrets in environment variables", [wl.kind, wl.metadata.name]),
            		"alertScore": 9,
            		"fixPaths": [],
            		"deletePaths": [path],
            		"failedPaths": [path],
            		"packagename": "policy",
            		"alertObject": {
            			"k8sApiObjects": [wl]
            		}
            	}
            }

            deny[msga] {
            	wl := input[_]
            	wl.kind == "CronJob"
            	container := wl.spec.jobTemplate.spec.template.spec.containers[i]
            	env := container.env[j]
            	env.valueFrom.secretKeyRef

            	path := sprintf("spec.jobTemplate.spec.template.spec.containers[%v].env[%v].name", [format_int(i, 10), format_int(j, 10)])

            	msga := {
            		"alertMessage": sprintf("Cronjob: %v has secrets in environment variables", [wl.metadata.name]),
            		"alertScore": 9,
            		"fixPaths": [],
            		"deletePaths": [path],
            		"failedPaths": [path],
            		"packagename": "policy",
            		"alertObject": {
            			"k8sApiObjects": [wl]
            		}
            	}
            }

            incidents[msg] {
              violation := deny[_]
              apiObjects := object.get(violation.alertObject, "k8sApiObjects", false)
              item := apiObjects[_]
              msg := {
            	  "apiVersion": item.apiVersion,
            		"namespace": item.metadata.namespace,
            		"kind": item.kind,
            		"name": item.metadata.name,
              }
            }

            incidents[msg] {
              violation := deny[_]
              item := object.get(violation.alertObject, "externalObjects", false)
              msg := {
            	  "apiVersion": item.apiVersion,
            		"namespace": item.metadata.namespace,
            		"kind": item.kind,
            		"name": item.metadata.name,
              }
            }
