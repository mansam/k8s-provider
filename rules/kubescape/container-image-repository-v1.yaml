- ruleID: container_image_repository_v1
  effort: 1
  category: optional
  message: Fails if image is not from allowed repository
  when:
    k8s-resource.rego_module:
        module: |-
            package policy

            untrustedImageRepo[msga] {
            	wl := input[_]
            	containers_path := get_containers_path(wl)
            	containers := object.get(wl, containers_path, [])
            	container := containers[i]
            	name := image.parse_normalized_name(container.image)
            	not image_in_allowed_list(name)
            	path := sprintf("%s[%d].image", [concat(".", containers_path), i])

            	msga := {
            		"alertMessage": sprintf("image '%v' in container '%s' comes from untrusted registry", [name, container.name]),
            		"packagename": "policy",
            		"alertScore": 2,
            		"fixPaths": [],
            		"reviewPaths": [path],
            		"failedPaths": [path],
            		"alertObject": {"k8sApiObjects": [wl]},
            	}
            }

            # image_in_allowed_list - rule to check if an image complies with imageRepositoryAllowList.
            image_in_allowed_list(image){
            	# see default-config-inputs.json for list values
            	allowedlist := data.postureControlInputs.imageRepositoryAllowList
            	registry := allowedlist[_]
            	startswith(image, registry)
            }

            # get_containers_path - get resource containers paths for  {"Deployment","ReplicaSet","DaemonSet","StatefulSet","Job"}
            get_containers_path(resource) := result {
            	resource_kinds := {"Deployment", "ReplicaSet", "DaemonSet", "StatefulSet", "Job"}
            	resource_kinds[resource.kind]
            	result = ["spec", "template", "spec", "containers"]
            }

            # get_containers_path - get resource containers paths for "Pod"
            get_containers_path(resource) := result {
            	resource.kind == "Pod"
            	result = ["spec", "containers"]
            }

            # get_containers_path - get resource containers paths for  "CronJob"
            get_containers_path(resource) := result {
            	resource.kind == "CronJob"
            	result = ["spec", "jobTemplate", "spec", "template", "spec", "containers"]
            }

            incidents[msg] {
              violation := untrustedImageRepo[_]
              apiObjects := object.get(violation.alertObject, "k8sApiObjects", false)
              item := apiObjects[_]
              msg := {
            	  "apiVersion": item.apiVersion,
            		"namespace": item.metadata.namespace,
            		"kind": item.kind,
            		"name": item.metadata.name,
              }
            }

            incidents[msg] {
              violation := untrustedImageRepo[_]
              item := object.get(violation.alertObject, "externalObjects", false)
              msg := {
            	  "apiVersion": item.apiVersion,
            		"namespace": item.metadata.namespace,
            		"kind": item.kind,
            		"name": item.metadata.name,
              }
            }
