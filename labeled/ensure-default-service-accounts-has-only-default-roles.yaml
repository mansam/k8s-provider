- ruleID: ensure_default_service_accounts_has_only_default_roles
  effort: 1
  category: optional
  message: ""
  labels:
    - eks
    - kubernetes
    - kubescape
    - konveyor.io/target=openshift
    - konveyor.io/target=kubernetes
    - konveyor.io/target=eks
  description: Ensure Default Service Accounts Has Only Default Roles
  when:
    k8s-resource.rego_module:
        module: |-
            package policy


            # deny if a default ServiceAccount has rules bound to it that are not defaults.
            deny[msga] {

                wl := input[_]
            	spec_template_spec_patterns := {"RoleBinding", "ClusterRoleBinding"}
            	spec_template_spec_patterns[wl.kind]

                # filter service accounts
                wl.subjects[i].kind == "ServiceAccount"

                # filter defaults
                wl.subjects[i].name == "default"

                not wl.metadata.labels["kubernetes.io/bootstrapping"] == "rbac-defaults"


            	msga := {
            		"alertMessage": sprintf("%s: %v has for ServiceAccount 'default' rules bound to it that are not defaults", [wl.kind, wl.metadata.name]),
            		"packagename": "policy",
                    "deletePaths": [sprintf("subjects[%d]", [i])],
                    "failedPaths": [sprintf("subjects[%d]", [i])],
                    "fixPaths":[],
            		"alertScore": 7,
                    "alertObject": {
            			"k8sApiObjects": [wl]
            		}
            	}
            }

            incidents[msg] {
              violation := deny[_]
              apiObjects := object.get(violation.alertObject, "k8sApiObjects", false)
              item := apiObjects[_]
              msg := {
            	  "apiVersion": item.apiVersion,
            		"namespace": item.metadata.namespace,
            		"kind": item.kind,
            		"name": item.metadata.name,
              }
            }

            incidents[msg] {
              violation := deny[_]
              item := object.get(violation.alertObject, "externalObjects", false)
              msg := {
            	  "apiVersion": item.apiVersion,
            		"namespace": item.metadata.namespace,
            		"kind": item.kind,
            		"name": item.metadata.name,
              }
            }
        resources: []
        defaults: false
