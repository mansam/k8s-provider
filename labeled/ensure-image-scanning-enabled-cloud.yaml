- ruleID: ensure_image_scanning_enabled_cloud
  effort: 1
  category: optional
  message: ""
  labels:
    - eks
    - kubernetes
    - kubescape
    - konveyor.io/target=openshift
    - konveyor.io/target=kubernetes
    - konveyor.io/target=eks
  description: Ensure Image Scanning Enabled Cloud
  when:
    k8s-resource.rego_module:
        module: |-
            package policy
            import future.keywords.in

            # Check if image scanning enabled for EKS
            deny[msga] {
            	describe_repositories := input[_]
            	describe_repositories.apiVersion == "eks.amazonaws.com/v1"
            	describe_repositories.kind == "DescribeRepositories"
            	describe_repositories.metadata.provider == "eks"
            	repos := describe_repositories.data.Repositories
            	some repo in repos
            	not image_scanning_configured(repo)
            	

            	msga := {
            		"alertMessage": "image scanning is not enabled",
            		"alertScore": 3,
            		"packagename": "policy",
            		"failedPaths": [],
            		"fixPaths": [],
            		"fixCommand": "aws ecr put-image-scanning-configuration --repository-name $REPO_NAME --image-scanning-configuration scanOnPush=true --region $REGION_CODE",
            		"alertObject": {
            			"k8sApiObjects": [],
            			"externalObjects": describe_repositories,
            		},
            	}
            }

            image_scanning_configured(repo) {
            	repo.ImageScanningConfiguration.ScanOnPush == true
            }
            incidents[msg] {
              violation := deny[_]
              apiObjects := object.get(violation.alertObject, "k8sApiObjects", false)
              item := apiObjects[_]
              msg := {
            	  "apiVersion": item.apiVersion,
            		"namespace": item.metadata.namespace,
            		"kind": item.kind,
            		"name": item.metadata.name,
              }
            }

            incidents[msg] {
              violation := deny[_]
              item := object.get(violation.alertObject, "externalObjects", false)
              msg := {
            	  "apiVersion": item.apiVersion,
            		"namespace": item.metadata.namespace,
            		"kind": item.kind,
            		"name": item.metadata.name,
              }
            }
        resources: []
        defaults: false
