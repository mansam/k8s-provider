- ruleID: configured_liveness_probe
  effort: 1
  category: optional
  message: Liveness probe is not configured
  labels:
    - eks
    - kubernetes
    - kubescape
    - konveyor.io/target=openshift
    - konveyor.io/target=kubernetes
    - konveyor.io/target=eks
  description: Configured Liveness Probe
  when:
    k8s-resource.rego_module:
        module: |-
            package policy


            # Fails if  container does not have livenessProbe - for pod
            deny[msga] {
                pod := input[_]
                pod.kind == "Pod"
                container := pod.spec.containers[i]
            	not container.livenessProbe
            	fix_path := {"path": sprintf("spec.containers[%v].livenessProbe", [format_int(i, 10)]), "value": "YOUR_VALUE"}
            	msga := {
            		"alertMessage": sprintf("Container: %v does not have livenessProbe", [ container.name]),
            		"packagename": "policy",
            		"alertScore": 4,
            		"fixPaths": [fix_path],
            		"failedPaths": [],
            		"alertObject": {
            			"k8sApiObjects": [pod]
            		}
            	}
            }

            # Fails if  container does not have livenessProbe - for wl
            deny[msga] {
                wl := input[_]
            	spec_template_spec_patterns := {"Deployment","ReplicaSet","DaemonSet","StatefulSet","Job"}
            	spec_template_spec_patterns[wl.kind]
                container := wl.spec.template.spec.containers[i]
                not container.livenessProbe
            	fix_path := {"path": sprintf("spec.template.spec.containers[%v].livenessProbe", [format_int(i, 10)]), "value": "YOUR_VALUE"}
            	msga := {
            		"alertMessage": sprintf("Container: %v in %v: %v   does not have livenessProbe", [ container.name, wl.kind, wl.metadata.name]),
            		"packagename": "policy",
            		"alertScore": 4,
            		"fixPaths": [fix_path],
            		"failedPaths": [],
            		"alertObject": {
            			"k8sApiObjects": [wl]
            		}
            	}
            }

            # Fails if  container does not have livenessProbe - for cronjob
            deny[msga] {
              	wl := input[_]
            	wl.kind == "CronJob"
            	container = wl.spec.jobTemplate.spec.template.spec.containers[i]
                not container.livenessProbe
            	fix_path := {"path": sprintf("spec.jobTemplate.spec.template.spec.containers[%v].livenessProbe", [format_int(i, 10)]), "value": "YOUR_VALUE"}
                msga := {
            		"alertMessage": sprintf("Container: %v in %v: %v   does not have livenessProbe", [ container.name, wl.kind, wl.metadata.name]),
            		"packagename": "policy",
            		"alertScore": 4,
            		"fixPaths": [fix_path],
            		"failedPaths": [],
            		"alertObject": {
            			"k8sApiObjects": [wl]
            		}
            	}
            }

            incidents[msg] {
              violation := deny[_]
              apiObjects := object.get(violation.alertObject, "k8sApiObjects", false)
              item := apiObjects[_]
              msg := {
            	  "apiVersion": item.apiVersion,
            		"namespace": item.metadata.namespace,
            		"kind": item.kind,
            		"name": item.metadata.name,
              }
            }

            incidents[msg] {
              violation := deny[_]
              item := object.get(violation.alertObject, "externalObjects", false)
              msg := {
            	  "apiVersion": item.apiVersion,
            		"namespace": item.metadata.namespace,
            		"kind": item.kind,
            		"name": item.metadata.name,
              }
            }
        resources: []
        defaults: false
