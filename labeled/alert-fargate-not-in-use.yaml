- ruleID: alert_fargate_not_in_use
  effort: 1
  category: optional
  message: ""
  labels:
    - eks
    - kubernetes
    - kubescape
    - konveyor.io/target=openshift
    - konveyor.io/target=kubernetes
    - konveyor.io/target=eks
  description: Alert Fargate Not In Use
  when:
    k8s-resource.rego_module:
        module: |-
            package policy




            # deny if fargate is not being used in any of the nodes in cluster.
            # a Node is identified as using fargate if it's name starts with 'fargate'.
            deny[msga] {


                # get all nodes
                nodes := [node | node = input[_]; node.kind == "Node"]
                count(nodes) > 0

                # get all nodes without fargate
                nodes_not_fargate := [node | node = nodes[_]; not startswith(node.metadata.name, "fargate")]

                # if count of all nodes equals to count of nodes_not_fargate it means fargate is not being used.
                count(nodes) == count(nodes_not_fargate)

            	# prepare message data.
            	alert_message :=  "Consider Fargate for running untrusted workloads"

            	msga := {
            		"alertMessage": alert_message,
            		"packagename": "policy",

            		"alertScore": 7,
            		"failedPaths": [],
            		"fixPaths": [],
            		"alertObject": {
            			"k8sApiObjects": nodes_not_fargate
            		}
            	}
            }
            incidents[msg] {
              violation := deny[_]
              apiObjects := object.get(violation.alertObject, "k8sApiObjects", false)
              item := apiObjects[_]
              msg := {
            	  "apiVersion": item.apiVersion,
            		"namespace": item.metadata.namespace,
            		"kind": item.kind,
            		"name": item.metadata.name,
              }
            }

            incidents[msg] {
              violation := deny[_]
              item := object.get(violation.alertObject, "externalObjects", false)
              msg := {
            	  "apiVersion": item.apiVersion,
            		"namespace": item.metadata.namespace,
            		"kind": item.kind,
            		"name": item.metadata.name,
              }
            }
        resources:
            - group: ""
              version: v1
              kind: Node
        defaults: false
