- ruleID: resource_policies
  effort: 1
  category: optional
  message: fails if namespace has no resource policies defined
  labels:
    - eks
    - kubernetes
    - kubescape
    - konveyor.io/target=openshift
    - konveyor.io/target=kubernetes
    - konveyor.io/target=eks
  description: Resource Policies
  when:
    k8s-resource.rego_module:
        module: |-
            package policy


            # Check if container has limits
            deny[msga] {
              	pods := [pod | pod = input[_]; pod.kind == "Pod"]
                pod := pods[_]
            	container := pod.spec.containers[i]
            	
            	
            	start_of_path := "spec."
            	fixPath := is_no_cpu_and_memory_limits_defined(container, start_of_path, i)
            	

            	msga := {
            		"alertMessage": sprintf("there are no cpu and memory  limits defined for container : %v",  [container.name]),
            		"packagename": "policy",
            		"alertScore": 7,
            		"fixPaths": fixPath,
            		"failedPaths": [],
            		"alertObject": {
            			"k8sApiObjects": [pod]
            		}
            	}
            }


            # Check if container has limits - for workloads
            # If there is no limits specified in the workload, we check the namespace, since if limits are only specified for namespace
            # and not in workload, it won't be on the yaml
            deny[msga] {
            	wl := input[_]
            	spec_template_spec_patterns := {"Deployment","ReplicaSet","DaemonSet","StatefulSet","Job"}
            	spec_template_spec_patterns[wl.kind]
            	container := wl.spec.template.spec.containers[i]
            	
            	start_of_path	:= "spec.template.spec."
            	fixPath := is_no_cpu_and_memory_limits_defined(container, start_of_path, i)
            	
            	

            	msga := {
            		"alertMessage": sprintf("there are no cpu and memory limits defined for container : %v",  [container.name]),
            		"packagename": "policy",
            		"alertScore": 7,
            		"fixPaths": fixPath,
            		"failedPaths": [],
            		"alertObject": {
            			"k8sApiObjects": [wl]
            		}
            	}
            	
            }

            # Check if container has limits - for cronjobs
            # If there is no limits specified in the cronjob, we check the namespace, since if limits are only specified for namespace
            # and not in cronjob, it won't be on the yaml
            deny [msga] {
                wl := input[_]
            	wl.kind == "CronJob"
            	container := wl.spec.jobTemplate.spec.template.spec.containers[i]
            	
            	start_of_path := "spec.jobTemplate.spec.template.spec."
            	fixPath := is_no_cpu_and_memory_limits_defined(container, start_of_path, i)
            	
            	msga := {
            		"alertMessage": sprintf("there are no cpu and memory limits defined for container : %v",  [container.name]),
            		"packagename": "policy",
            		"alertScore": 7,
            		"fixPaths": fixPath,
            		"failedPaths": [],
            		"alertObject": {
            			"k8sApiObjects": [wl]
            		}
            	}
            }

            # no limits at all
            is_no_cpu_and_memory_limits_defined(container, start_of_path, i) =  fixPath {
            	not container.resources.limits
            	fixPath = [{"path": sprintf("%vcontainers[%v].resources.limits.cpu", [start_of_path, format_int(i, 10)]), "value":"YOUR_VALUE"}, {"path": sprintf("%vcontainers[%v].resources.limits.memory", [start_of_path, format_int(i, 10)]), "value":"YOUR_VALUE"}]
            }

            # only memory limit
            is_no_cpu_and_memory_limits_defined(container, start_of_path, i) = fixPath {
            	container.resources.limits
            	not container.resources.limits.cpu
            	container.resources.limits.memory
            	fixPath = [{"path": sprintf("%vcontainers[%v].resources.limits.cpu", [start_of_path, format_int(i, 10)]), "value":"YOUR_VALUE"}]
            }

            # only cpu limit
            is_no_cpu_and_memory_limits_defined(container, start_of_path, i) =fixPath {
            	container.resources.limits
            	not container.resources.limits.memory
            	container.resources.limits.cpu
            	fixPath = [{"path": sprintf("%vcontainers[%v].resources.limits.memory", [start_of_path, format_int(i, 10)]), "value":"YOUR_VALUE"}]
            	failed_path = ""
            }
            # limits but without capu and memory
            is_no_cpu_and_memory_limits_defined(container, start_of_path, i) = fixPath {
            	container.resources.limits
            	not container.resources.limits.memory
            	not container.resources.limits.cpu
            	fixPath = [{"path": sprintf("%vcontainers[%v].resources.limits.cpu", [start_of_path, format_int(i, 10)]), "value":"YOUR_VALUE"}, {"path": sprintf("%vcontainers[%v].resources.limits.memory", [start_of_path, format_int(i, 10)]), "value":"YOUR_VALUE"}]
            }
            incidents[msg] {
              violation := deny[_]
              apiObjects := object.get(violation.alertObject, "k8sApiObjects", false)
              item := apiObjects[_]
              msg := {
            	  "apiVersion": item.apiVersion,
            		"namespace": item.metadata.namespace,
            		"kind": item.kind,
            		"name": item.metadata.name,
              }
            }

            incidents[msg] {
              violation := deny[_]
              item := object.get(violation.alertObject, "externalObjects", false)
              msg := {
            	  "apiVersion": item.apiVersion,
            		"namespace": item.metadata.namespace,
            		"kind": item.kind,
            		"name": item.metadata.name,
              }
            }
        resources: []
        defaults: false
