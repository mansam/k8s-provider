- ruleID: access_container_service_account_v1
  effort: 1
  category: optional
  message: determines which service accounts can be used to access other resources in the cluster
  labels:
    - eks
    - kubernetes
    - kubescape
    - konveyor.io/target=openshift
    - konveyor.io/target=kubernetes
    - konveyor.io/target=eks
  description: Access Container Service Account V1
  when:
    k8s-resource.rego_module:
        module: |-
            package policy


            # Returns the rbac permission of each service account
            deny[msga] {
                subjectVector := input[_]
                subjectVector.kind == "ServiceAccount"

            	role := subjectVector.relatedObjects[i]
            	rolebinding := subjectVector.relatedObjects[j]
            	endswith(role.kind, "Role")
            	endswith(rolebinding.kind, "Binding")

                subject := rolebinding.subjects[k]
            	is_same_subjects(subjectVector, subject)


            	msga := {
            		"alertMessage": sprintf("service account: %v has the following permissions in the cluster", [subjectVector.name]),
            		"packagename": "policy",
                   "failedPaths": [],
                    "fixPaths":[],
            		"alertScore": 7,
                    "alertObject": {
            			"k8sApiObjects": [],
                        "externalObjects": subjectVector
            		}
            	}
            }

            # ===============================================================

            # for service accounts
            is_same_subjects(subjectVector, subject) {
            	subjectVector.kind == subject.kind
            	subjectVector.name == subject.name
            	subjectVector.namespace == subject.namespace
            }
            incidents[msg] {
              violation := deny[_]
              apiObjects := object.get(violation.alertObject, "k8sApiObjects", false)
              item := apiObjects[_]
              msg := {
            	  "apiVersion": item.apiVersion,
            		"namespace": item.metadata.namespace,
            		"kind": item.kind,
            		"name": item.metadata.name,
              }
            }

            incidents[msg] {
              violation := deny[_]
              item := object.get(violation.alertObject, "externalObjects", false)
              msg := {
            	  "apiVersion": item.apiVersion,
            		"namespace": item.metadata.namespace,
            		"kind": item.kind,
            		"name": item.metadata.name,
              }
            }
        resources:
            - group: ""
              version: v1
              kind: ServiceAccount
            - group: rbac.authorization.k8s.io
              version: v1
              kind: RoleBinding
            - group: rbac.authorization.k8s.io
              version: v1
              kind: ClusterRoleBinding
            - group: rbac.authorization.k8s.io
              version: v1
              kind: Role
            - group: rbac.authorization.k8s.io
              version: v1
              kind: ClusterRole
        defaults: false
