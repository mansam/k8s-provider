- ruleID: ensure_external_secrets_storage_is_in_use
  effort: 1
  category: optional
  message: ""
  labels:
    - eks
    - kubernetes
    - kubescape
    - konveyor.io/target=openshift
    - konveyor.io/target=kubernetes
    - konveyor.io/target=eks
  description: Ensure External Secrets Storage Is In Use
  when:
    k8s-resource.rego_module:
        module: |-
            package policy

            import future.keywords.in

            import data.kubernetes.api.client

            # deny workloads that doesn't support external service provider (secretProviderClass)
            # reference - https://secrets-store-csi-driver.sigs.k8s.io/concepts.html
            deny[msga] {

                resources := input[_]

            	# get volume paths for each resource
            	volumes_path := get_volumes_path(resources)

            	# get volumes for each resources
            	volumes := object.get(resources, volumes_path, [])

            	# continue if secretProviderClass not found in resource
            	having_secretProviderClass := {i | volumes[i].csi.volumeAttributes.secretProviderClass}
              	count(having_secretProviderClass) == 0


            	# prepare message data.
            	alert_message :=  sprintf("%s: %v is not using external secret storage", [resources.kind, resources.metadata.name])
            	failed_paths := []
            	fixed_paths := [{"path":sprintf("%s[0].csi.volumeAttributes.secretProviderClass",[concat(".", volumes_path)]), "value":"YOUR_VALUE"}]

            	msga := {
            		"alertMessage": alert_message,
            		"packagename": "policy",
            		"alertScore": 7,
            		"failedPaths": failed_paths,
            		"fixPaths": fixed_paths,
            		"alertObject": {
            			"k8sApiObjects": [resources]
            		}
            	}
            }


            # get_volume_path - get resource volumes paths for {"Deployment","ReplicaSet","DaemonSet","StatefulSet","Job"}
            get_volumes_path(resources) := result {
            	resources_kinds := {"Deployment","ReplicaSet","DaemonSet","StatefulSet","Job"}
            	resources_kinds[resources.kind]
            	result = ["spec", "template", "spec", "volumes"]
            }

            # get_volumes_path - get resource volumes paths for "Pod"
            get_volumes_path(resources) := result {
            	resources.kind == "Pod"
            	result = ["spec", "volumes"]
            }

            # get_volumes_path - get resource volumes paths for "CronJob"
            get_volumes_path(resources) := result {
            	resources.kind == "CronJob"
            	result = ["spec", "jobTemplate", "spec", "template", "spec", "volumes"]
            }

            incidents[msg] {
              violation := deny[_]
              apiObjects := object.get(violation.alertObject, "k8sApiObjects", false)
              item := apiObjects[_]
              msg := {
            	  "apiVersion": item.apiVersion,
            		"namespace": item.metadata.namespace,
            		"kind": item.kind,
            		"name": item.metadata.name,
              }
            }

            incidents[msg] {
              violation := deny[_]
              item := object.get(violation.alertObject, "externalObjects", false)
              msg := {
            	  "apiVersion": item.apiVersion,
            		"namespace": item.metadata.namespace,
            		"kind": item.kind,
            		"name": item.metadata.name,
              }
            }
        resources: []
        defaults: false
