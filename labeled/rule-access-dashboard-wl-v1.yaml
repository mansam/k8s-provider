- ruleID: rule_access_dashboard_wl_v1
  effort: 1
  category: optional
  message: fails if subject that is not dashboard service account is bound to dashboard role/clusterrole, or- if anyone that is not dashboard pod is associated with its service account.
  labels:
    - eks
    - kubernetes
    - kubescape
    - konveyor.io/target=openshift
    - konveyor.io/target=kubernetes
    - konveyor.io/target=eks
  description: Rule Access Dashboard Wl V1
  when:
    k8s-resource.rego_module:
        module: |-
            package policy

            # input:
            # apiversion:
            # fails if pod that is not dashboard is associated to dashboard service account

            deny[msga] {
                pod := input[_]
                pod.spec.serviceAccountName == "kubernetes-dashboard"
                not startswith(pod.metadata.name, "kubernetes-dashboard")

            	msga := {
            		"alertMessage": sprintf("the following pods: %s are associated with dashboard service account", [pod.metadata.name]),
            		"packagename": "policy",
            		"alertScore": 7,
            		"fixPaths": [],
            		"deletePaths": ["spec.serviceAccountName"],
            		"failedPaths": ["spec.serviceAccountName"],
            		"alertObject": {
            			"k8sApiObjects": [pod]
            		}
            	}
            }

            # input:
            # apiversion:
            # fails if workload that is not dashboard is associated to dashboard service account

            deny[msga] {
                wl := input[_]
            	spec_template_spec_patterns := {"Deployment","ReplicaSet","DaemonSet","StatefulSet","Job"}
            	spec_template_spec_patterns[wl.kind]
                wl.spec.template.spec.serviceAccountName == "kubernetes-dashboard"
                not startswith(wl.metadata.name, "kubernetes-dashboard")

            	msga := {
            		"alertMessage": sprintf("%v: %v is associated with dashboard service account", [wl.kind, wl.metadata.name]),
            		"packagename": "policy",
            		"deletePaths": ["spec.template.spec.serviceAccountName"],
            		"failedPaths": ["spec.template.spec.serviceAccountName"],
            		"alertScore": 7,
            		"fixPaths": [],
            		"alertObject": {
            			"k8sApiObjects": [wl]
            		}
            	}
            }

            # input:
            # apiversion:
            # fails if CronJob that is not dashboard is associated to dashboard service account

            deny[msga] {
                wl := input[_]
            	wl.kind == "CronJob"
                wl.spec.jobTemplate.spec.template.spec.serviceAccountName == "kubernetes-dashboard"
                not startswith(wl.metadata.name, "kubernetes-dashboard")

            	msga := {
            		"alertMessage": sprintf("the following cronjob: %s is associated with dashboard service account", [wl.metadata.name]),
            		"packagename": "policy",
            		"alertScore": 7,
            		"fixPaths": [],
            		"deletePaths": ["spec.jobTemplate.spec.template.spec.serviceAccountName"],
            		"failedPaths": ["spec.jobTemplate.spec.template.spec.serviceAccountName"],
            		"alertObject": {
            			"k8sApiObjects": [wl]
            		}
            	}
            }
            incidents[msg] {
              violation := deny[_]
              apiObjects := object.get(violation.alertObject, "k8sApiObjects", false)
              item := apiObjects[_]
              msg := {
            	  "apiVersion": item.apiVersion,
            		"namespace": item.metadata.namespace,
            		"kind": item.kind,
            		"name": item.metadata.name,
              }
            }

            incidents[msg] {
              violation := deny[_]
              item := object.get(violation.alertObject, "externalObjects", false)
              msg := {
            	  "apiVersion": item.apiVersion,
            		"namespace": item.metadata.namespace,
            		"kind": item.kind,
            		"name": item.metadata.name,
              }
            }
        resources: []
        defaults: false
