- ruleID: automount_default_service_account
  effort: 1
  category: optional
  message: fails if default service account mounts service account token by default
  labels:
    - eks
    - kubernetes
    - kubescape
    - konveyor.io/target=openshift
    - konveyor.io/target=kubernetes
    - konveyor.io/target=eks
  description: Automount Default Service Account
  when:
    k8s-resource.rego_module:
        module: |-
            package policy

            # Fails if user account mount tokens in pod by default
            deny [msga]{
                service_accounts := [service_account |  service_account= input[_]; service_account.kind == "ServiceAccount"]
                service_account := service_accounts[_]
            	service_account.metadata.name == "default"
                result := is_auto_mount(service_account)
            	failed_path := get_failed_path(result)
                fixed_path := get_fixed_path(result)

                msga := {
            	    "alertMessage": sprintf("the following service account: %v in the following namespace: %v mounts service account tokens in pods by default", [service_account.metadata.name, service_account.metadata.namespace]),
            		"alertScore": 9,
            		"packagename": "policy",
            		"fixPaths": fixed_path,
            		"deletePaths": failed_path,
            		"failedPaths": failed_path,
            		"alertObject": {
            			"k8sApiObjects": [service_account]
            		}
            	}
            }


            get_failed_path(paths) = [paths[0]] {
            	paths[0] != ""
            } else = []


            get_fixed_path(paths) = [paths[1]] {
            	paths[1] != ""
            } else = []



             #  -- ----     For SAs     -- ----
            is_auto_mount(service_account)  =  [failed_path, fix_path]  {
            	service_account.automountServiceAccountToken == true
            	failed_path = "automountServiceAccountToken"
            	fix_path = ""
            }

            is_auto_mount(service_account)=  [failed_path, fix_path]  {
            	not service_account.automountServiceAccountToken == false
            	not service_account.automountServiceAccountToken == true
            	fix_path = {"path": "automountServiceAccountToken", "value": "false"}
            	failed_path = ""
            }

            incidents[msg] {
              violation := deny[_]
              apiObjects := object.get(violation.alertObject, "k8sApiObjects", false)
              item := apiObjects[_]
              msg := {
            	  "apiVersion": item.apiVersion,
            		"namespace": item.metadata.namespace,
            		"kind": item.kind,
            		"name": item.metadata.name,
              }
            }

            incidents[msg] {
              violation := deny[_]
              item := object.get(violation.alertObject, "externalObjects", false)
              msg := {
            	  "apiVersion": item.apiVersion,
            		"namespace": item.metadata.namespace,
            		"kind": item.kind,
            		"name": item.metadata.name,
              }
            }
        resources: []
        defaults: false
