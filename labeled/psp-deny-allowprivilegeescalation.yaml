- ruleID: psp_deny_allowprivilegeescalation
  effort: 1
  category: optional
  message: ""
  labels:
    - eks
    - kubernetes
    - kubescape
    - konveyor.io/target=openshift
    - konveyor.io/target=kubernetes
    - konveyor.io/target=eks
  description: Psp Deny Allowprivilegeescalation
  when:
    k8s-resource.rego_module:
        module: |-
            package policy

            import future.keywords.every

            deny[msga] {
            	# only fail resources if there all PSPs have allowPrivilegeEscalation set to true
            	# if even one PSP has allowPrivilegeEscalation set to false, then the rule will not fail
            	every psp in input {
            		psp.kind == "PodSecurityPolicy"
            		psp.spec.allowPrivilegeEscalation == true
            	}

            	# return al the PSPs that have allowPrivilegeEscalation set to true
            	psp := input[_]
            	psp.kind == "PodSecurityPolicy"
            	psp.spec.allowPrivilegeEscalation == true

            	path := "spec.allowPrivilegeEscalation"
            	msga := {
            		"alertMessage": sprintf("PodSecurityPolicy: '%v' has allowPrivilegeEscalation set as true.", [psp.metadata.name]),
            		"packagename": "policy",
            		"deletePaths": [path],
            		"failedPaths": [path],
            		"fixPaths": [],
            		"alertObject": {"k8sApiObjects": [psp]},
            	}
            }

            incidents[msg] {
              violation := deny[_]
              apiObjects := object.get(violation.alertObject, "k8sApiObjects", false)
              item := apiObjects[_]
              msg := {
            	  "apiVersion": item.apiVersion,
            		"namespace": item.metadata.namespace,
            		"kind": item.kind,
            		"name": item.metadata.name,
              }
            }

            incidents[msg] {
              violation := deny[_]
              item := object.get(violation.alertObject, "externalObjects", false)
              msg := {
            	  "apiVersion": item.apiVersion,
            		"namespace": item.metadata.namespace,
            		"kind": item.kind,
            		"name": item.metadata.name,
              }
            }
        resources: []
        defaults: false
