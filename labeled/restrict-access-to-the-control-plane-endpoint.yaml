- ruleID: restrict_access_to_the_control_plane_endpoint
  effort: 1
  category: optional
  message: Enable Endpoint Private Access to restrict access to the cluster's control plane to only an allowlist of authorized IPs.
  labels:
    - eks
    - kubernetes
    - kubescape
    - konveyor.io/target=openshift
    - konveyor.io/target=kubernetes
    - konveyor.io/target=eks
  description: Restrict Access To The Control Plane Endpoint
  when:
    k8s-resource.rego_module:
        module: |-
            package policy

            # fails in case authorizedIPRanges is not set.
            deny[msga] {
            	obj := input[_]
            	obj.apiVersion == "management.azure.com/v1"
            	obj.kind == "ClusterDescribe"
            	obj.metadata.provider == "aks"
            	config = obj.data

            	not isAuthorizedIPRangesSet(config)

            	msga := {
                	"alertMessage": "Parameter 'authorizedIPRanges' was not set.",
                	"packagename": "policy",
                	"alertScore": 7,
            		"reviewPaths": [],
                	"failedPaths": [],
                	"fixPaths":[],
                    "fixCommand": "az aks update -n '<name>' -g '<resource_group>' --api-server-authorized-ip-ranges '0.0.0.0/32'",
                	"alertObject": {
            			"externalObjects": obj
                    }
                }

            }

            isAuthorizedIPRangesSet(config) {
            	count(config.properties.apiServerAccessProfile.authorizedIPRanges) > 0
            }

            incidents[msg] {
              violation := deny[_]
              apiObjects := object.get(violation.alertObject, "k8sApiObjects", false)
              item := apiObjects[_]
              msg := {
            	  "apiVersion": item.apiVersion,
            		"namespace": item.metadata.namespace,
            		"kind": item.kind,
            		"name": item.metadata.name,
              }
            }

            incidents[msg] {
              violation := deny[_]
              item := object.get(violation.alertObject, "externalObjects", false)
              msg := {
            	  "apiVersion": item.apiVersion,
            		"namespace": item.metadata.namespace,
            		"kind": item.kind,
            		"name": item.metadata.name,
              }
            }
        resources: []
        defaults: false
