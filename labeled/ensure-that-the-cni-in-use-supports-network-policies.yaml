- ruleID: ensure_that_the_cni_in_use_supports_network_policies
  effort: 1
  category: optional
  message: There are a variety of CNI plugins available for Kubernetes. If the CNI in use does not support Network Policies it may not be possible to effectively restrict traffic in the cluster.
  labels:
    - eks
    - kubernetes
    - kubescape
    - konveyor.io/target=openshift
    - konveyor.io/target=kubernetes
    - konveyor.io/target=eks
  description: Ensure That The Cni In Use Supports Network Policies
  when:
    k8s-resource.rego_module:
        module: "package policy\r\n\r\nimport future.keywords.in\r\n\r\n# Deny CNIs that don't support Network Policies.\r\n\r\ndeny[msg] {\r\n\t# Filter out irrelevent resources\r\n\tobj = input[_]\r\n\r\n    is_CNIInfo(obj)\r\n\r\n\tnetwork_policy_not_supported(obj.data.CNINames)\r\n\r\n\t# filter out irrelevant host-sensor data\r\n    obj_filtered := json.filter(obj, [\"apiVersion\", \"kind\", \"metadata\", \"data/CNINames\"])\r\n\r\n    msg := {\r\n\t\t\"alertMessage\": \"CNI doesn't support Network Policies.\",\r\n\t\t\"alertScore\": 2,\r\n\t\t\"failedPaths\": [],\r\n\t\t\"fixPaths\": [],\r\n\t\t\"fixCommand\": \"\",\r\n\t\t\"packagename\": \"policy\",\r\n\t\t\"alertObject\": {\"externalObjects\": obj_filtered},\r\n\r\n\t}\r\n}\r\n\r\nis_CNIInfo(obj) {\r\n\tobj.apiVersion == \"hostdata.kubescape.cloud/v1beta0\"\r\n\tobj.kind == \"CNIInfo\"\r\n}\r\n\r\n\r\n# deny if Flannel is running without calico\r\nnetwork_policy_not_supported(CNIs) {\r\n\t\"Flannel\" in CNIs\r\n\tnot \"Calico\" in CNIs\r\n}\r\n\r\n# deny if aws is running without any other CNI\r\nnetwork_policy_not_supported(CNIs) {\r\n\t\"aws\" in CNIs\r\n\tcount(CNIs) < 2\r\n}\r\n\nincidents[msg] {\n  violation := deny[_]\n  apiObjects := object.get(violation.alertObject, \"k8sApiObjects\", false)\n  item := apiObjects[_]\n  msg := {\n\t  \"apiVersion\": item.apiVersion,\n\t\t\"namespace\": item.metadata.namespace,\n\t\t\"kind\": item.kind,\n\t\t\"name\": item.metadata.name,\n  }\n}\n\nincidents[msg] {\n  violation := deny[_]\n  item := object.get(violation.alertObject, \"externalObjects\", false)\n  msg := {\n\t  \"apiVersion\": item.apiVersion,\n\t\t\"namespace\": item.metadata.namespace,\n\t\t\"kind\": item.kind,\n\t\t\"name\": item.metadata.name,\n  }\n}"
        resources: []
        defaults: false
