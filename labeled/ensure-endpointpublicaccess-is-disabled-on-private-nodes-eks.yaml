- ruleID: ensure_endpointpublicaccess_is_disabled_on_private_nodes_eks
  effort: 1
  category: optional
  message: ""
  labels:
    - eks
    - kubernetes
    - kubescape
    - konveyor.io/target=openshift
    - konveyor.io/target=kubernetes
    - konveyor.io/target=eks
  description: Ensure Endpointpublicaccess Is Disabled On Private Nodes Eks
  when:
    k8s-resource.rego_module:
        module: |-
            package policy

            import future.keywords.in

            # Check if EndpointPublicAccess in enabled on a private node for EKS. A private node is a node with no public ips access.
            deny[msga] {
            	cluster_config := input[_]
            	cluster_config.apiVersion == "eks.amazonaws.com/v1"
            	cluster_config.kind == "ClusterDescribe"
                cluster_config.metadata.provider == "eks"
            	config := cluster_config.data

            	config.Cluster.ResourcesVpcConfig.EndpointPublicAccess == true

            	# filter out private nodes
            	"0.0.0.0/0" in config.Cluster.ResourcesVpcConfig.PublicAccessCidrs

            	msga := {
            		"alertMessage": "endpointPublicAccess is enabled on a private node",
            		"alertScore": 3,
            		"packagename": "policy",
            		"failedPaths": [],
            		"fixPaths": [],
            		"fixCommand": "aws eks update-cluster-config --region $AWS_REGION --name $CLUSTER_NAME --resources-vpc-config endpointPrivateAccess=true,endpointPublicAccess=false",
            		"alertObject": {
            			"k8sApiObjects": [],
                        "externalObjects": cluster_config
            		}
            	}
            }



            incidents[msg] {
              violation := deny[_]
              apiObjects := object.get(violation.alertObject, "k8sApiObjects", false)
              item := apiObjects[_]
              msg := {
            	  "apiVersion": item.apiVersion,
            		"namespace": item.metadata.namespace,
            		"kind": item.kind,
            		"name": item.metadata.name,
              }
            }

            incidents[msg] {
              violation := deny[_]
              item := object.get(violation.alertObject, "externalObjects", false)
              msg := {
            	  "apiVersion": item.apiVersion,
            		"namespace": item.metadata.namespace,
            		"kind": item.kind,
            		"name": item.metadata.name,
              }
            }
        resources: []
        defaults: false
