- ruleID: container_hostPort
  effort: 1
  category: optional
  message: fails if container has hostPort
  labels:
    - eks
    - kubernetes
    - kubescape
    - konveyor.io/target=openshift
    - konveyor.io/target=kubernetes
    - konveyor.io/target=eks
  description: Container Hostport
  when:
    k8s-resource.rego_module:
        module: |-
            package policy


            # Fails if pod has container with hostPort
            deny[msga] {
                pod := input[_]
                pod.kind == "Pod"
                container := pod.spec.containers[i]
            	start_of_path := "spec."
            	path := is_host_port(container, i, start_of_path)
            	msga := {
            		"alertMessage": sprintf("Container: %v has Host-port", [ container.name]),
            		"packagename": "policy",
            		"alertScore": 4,
            		"deletePaths": path,
            		"failedPaths": path,
            		"fixPaths":[],
            		"alertObject": {
            			"k8sApiObjects": [pod]
            		}
            	}
            }

            # Fails if workload has container with hostPort
            deny[msga] {
                wl := input[_]
            	spec_template_spec_patterns := {"Deployment","ReplicaSet","DaemonSet","StatefulSet","Job"}
            	spec_template_spec_patterns[wl.kind]
                container := wl.spec.template.spec.containers[i]
            	start_of_path := "spec.template.spec."
                path := is_host_port(container, i, start_of_path)
            	msga := {
            		"alertMessage": sprintf("Container: %v in %v: %v   has Host-port", [ container.name, wl.kind, wl.metadata.name]),
            		"packagename": "policy",
            		"alertScore": 4,
            		"deletePaths": path,
            		"failedPaths": path,
            		"fixPaths":[],
            		"alertObject": {
            			"k8sApiObjects": [wl]
            		}
            	}
            }

            # Fails if cronjob has container with hostPort
            deny[msga] {
              	wl := input[_]
            	wl.kind == "CronJob"
            	container = wl.spec.jobTemplate.spec.template.spec.containers[i]
            	start_of_path := "spec.jobTemplate.spec.template.spec."
                path := is_host_port(container, i, start_of_path)
                msga := {
            		"alertMessage": sprintf("Container: %v in %v: %v   has Host-port", [ container.name, wl.kind, wl.metadata.name]),
            		"packagename": "policy",
            		"alertScore": 4,
            		"deletePaths": path,
            		"failedPaths": path,
            		"fixPaths":[],
            		"alertObject": {
            			"k8sApiObjects": [wl]
            		}
            	}
            }



            is_host_port(container, i, start_of_path) = path {
            	path = [sprintf("%vcontainers[%v].ports[%v].hostPort", [start_of_path, format_int(i, 10), format_int(j, 10)]) | port = container.ports[j];  port.hostPort]
            	count(path) > 0
            }

            incidents[msg] {
              violation := deny[_]
              apiObjects := object.get(violation.alertObject, "k8sApiObjects", false)
              item := apiObjects[_]
              msg := {
            	  "apiVersion": item.apiVersion,
            		"namespace": item.metadata.namespace,
            		"kind": item.kind,
            		"name": item.metadata.name,
              }
            }

            incidents[msg] {
              violation := deny[_]
              item := object.get(violation.alertObject, "externalObjects", false)
              msg := {
            	  "apiVersion": item.apiVersion,
            		"namespace": item.metadata.namespace,
            		"kind": item.kind,
            		"name": item.metadata.name,
              }
            }
        resources: []
        defaults: false
