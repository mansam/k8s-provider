- ruleID: set_fsgroupchangepolicy_value
  effort: 1
  category: optional
  message: Fails if securityContext.fsGroup is not set.
  labels:
    - eks
    - kubernetes
    - kubescape
    - konveyor.io/target=openshift
    - konveyor.io/target=kubernetes
    - konveyor.io/target=eks
  description: Set Fsgroupchangepolicy Value
  when:
    k8s-resource.rego_module:
        module: |-
            package policy

            import future.keywords.if

            ### POD ###

            # Fails if securityContext.fsGroupChangePolicy does not have an allowed value
            deny[msga] {
                # verify the object kind
                pod := input[_]
                pod.kind = "Pod"

                # check securityContext has fsGroupChangePolicy set
                not fsGroupChangePolicySetProperly(pod.spec.securityContext)

                msga := {
            		"alertMessage": sprintf("Pod: %v does not set 'securityContext.fsGroupChangePolicy' with allowed value", [pod.metadata.name]),
            		"packagename": "policy",
            		"alertScore": 7,
            		"failedPaths": [],
            		"fixPaths": [{"path": "spec.securityContext.fsGroupChangePolicy", "value": "Always"}],
                "alertObject": {
            			"k8sApiObjects": [pod]
            		}
                }
            }

            ### WORKLOAD ###

            # Fails if securityContext.fsGroupChangePolicy does not have an allowed value
            deny[msga] {
                # verify the object kind
                wl := input[_]
                manifest_kind := {"Deployment","ReplicaSet","DaemonSet","StatefulSet","Job"}
                manifest_kind[wl.kind]

                # check securityContext has fsGroupChangePolicy set
                not fsGroupChangePolicySetProperly(wl.spec.template.spec.securityContext)

                msga := {
            		"alertMessage": sprintf("Workload: %v does not set 'securityContext.fsGroupChangePolicy' with allowed value", [wl.metadata.name]),
            		"packagename": "policy",
            		"alertScore": 7,
            		"failedPaths": [],
            		"fixPaths": [{"path": "spec.template.spec.securityContext.fsGroupChangePolicy", "value": "Always"}],
            		"alertObject": {
            			"k8sApiObjects": [wl]
            		}
                }
            }

            ### CRONJOB ###

            # Fails if securityContext.fsGroupChangePolicy does not have an allowed value
            deny[msga] {
                # verify the object kind
                cj := input[_]
                cj.kind == "CronJob"

                # check securityContext has fsGroupChangePolicy set
                not fsGroupChangePolicySetProperly(cj.spec.jobTemplate.spec.template.spec.securityContext)

                msga := {
            		"alertMessage": sprintf("CronJob: %v does not set 'securityContext.fsGroupChangePolicy' with allowed value", [cj.metadata.name]),
            		"packagename": "policy",
            		"alertScore": 7,
            		"failedPaths": [],
            		"fixPaths": [{"path": "spec.jobTemplate.spec.template.spec.securityContext.fsGroupChangePolicy", "value": "Always"}],
            		"alertObject": {
            			"k8sApiObjects": [cj]
            		}
                }
            }

            # fsGroupChangePolicySetProperly checks if applied value is set as appropriate [Always|OnRootMismatch]
            fsGroupChangePolicySetProperly(securityContext) := true if {
                regex.match(securityContext.fsGroupChangePolicy, "Always|OnRootMismatch")
            } else := false


            incidents[msg] {
              violation := deny[_]
              apiObjects := object.get(violation.alertObject, "k8sApiObjects", false)
              item := apiObjects[_]
              msg := {
            	  "apiVersion": item.apiVersion,
            		"namespace": item.metadata.namespace,
            		"kind": item.kind,
            		"name": item.metadata.name,
              }
            }

            incidents[msg] {
              violation := deny[_]
              item := object.get(violation.alertObject, "externalObjects", false)
              msg := {
            	  "apiVersion": item.apiVersion,
            		"namespace": item.metadata.namespace,
            		"kind": item.kind,
            		"name": item.metadata.name,
              }
            }
        resources: []
        defaults: false
